{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport { Appbar, Button } from 'react-native-paper';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Web3 from 'web3';\nimport { useWalletConnect } from '@walletconnect/react-native-dapp';\nimport SmartContract from \"../../deployedContracts/BioFiCollection.json\";\nimport { Grid, Row } from 'react-native-easy-grid';\nimport { getDefaultProvider } from 'ethers';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar web3 = new Web3(new Web3.providers.HttpProvider('https://eth-rinkeby.alchemyapi.io/v2/CKjA2vCRdONEgzsnq363uvG6ogeaOWjH'));\nexport default function NFTScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      smObj = _React$useState2[0],\n      setSmObj = _React$useState2[1];\n\n  var connector = useWalletConnect();\n  var accounts = connector.accounts;\n  var contract = '0x987934934388446e9a1B8261d6859D31cdD0Eaa5';\n  React.useEffect(function () {\n    var SmartContractObj = new web3.eth.Contract(SmartContract.abi, '0x987934934388446e9a1B8261d6859D31cdD0Eaa5');\n    setSmObj(SmartContractObj);\n  }, []);\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      userNFT = _React$useState4[0],\n      setUserNFT = _React$useState4[1];\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      NFTMetada = _React$useState6[0],\n      setNFTMetadata = _React$useState6[1];\n\n  var _React$useState7 = React.useState(null),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      image = _React$useState8[0],\n      setImage = _React$useState8[1];\n\n  var _React$useState9 = React.useState(connector.connected),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      isConnected = _React$useState10[0],\n      setIsConnected = _React$useState10[1];\n\n  useEffect(function () {\n    console.log('OK' + userNFT);\n    !!userNFT && getMetadata();\n  }, [userNFT]);\n  useEffect(function () {\n    isConnected && smObj && fetchConnectedData(accounts[0]);\n  }, [isConnected, smObj]);\n  useEffect(function () {\n    !!NFTMetada && smObj && fetchImage(NFTMetada);\n  }, [NFTMetada, smObj]);\n\n  var fetchImage = function _callee(data) {\n    var text;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            text = data && data.replace('ipfs://', 'https://ipfs.io/ipfs/');\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(text).then(function (response) {\n              return response.json();\n            }).then(function (responseJson) {\n              console.log(responseJson);\n              setImage(responseJson.image);\n            }));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var mintNFTs = function _callee2() {\n    var gasPrice, gasPriceHex, nonce, nonceHex, tx, response, res;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(web3.eth.getGasPrice());\n\n          case 3:\n            gasPrice = _context2.sent;\n            gasPriceHex = web3.utils.toHex(gasPrice);\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(web3.eth.getTransactionCount(accounts[0]));\n\n          case 7:\n            nonce = _context2.sent;\n            nonceHex = web3.utils.toHex(nonce);\n            tx = {\n              from: accounts[0],\n              to: '0x987934934388446e9a1B8261d6859D31cdD0Eaa5',\n              data: smObj.methods.mint(accounts[0], 1).encodeABI(),\n              value: web3.utils.toWei((0.001 * 1).toString(), 'ether'),\n              gasPrice: gasPriceHex,\n              nonce: nonceHex\n            };\n            console.log('tx', tx);\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(connector.sendTransaction(tx));\n\n          case 13:\n            response = _context2.sent;\n            console.log('response: ', response);\n\n            if (!response) {\n              _context2.next = 21;\n              break;\n            }\n\n            _context2.next = 18;\n            return _regeneratorRuntime.awrap(smObj.methods.walletOfOwner(accounts[0]).call({\n              from: accounts[0]\n            }));\n\n          case 18:\n            res = _context2.sent;\n            setUserNFT(res);\n            console.log('success');\n\n          case 21:\n            _context2.next = 26;\n            break;\n\n          case 23:\n            _context2.prev = 23;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log('error: ', _context2.t0);\n\n          case 26:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 23]], Promise);\n  };\n\n  var getMetadata = function _callee3() {\n    var res;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(smObj.methods.tokenURI(userNFT.slice(-1)[0]).call({\n              from: accounts[0]\n            }));\n\n          case 3:\n            res = _context3.sent;\n            setNFTMetadata(res);\n            _context3.next = 10;\n            break;\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log('error: ', _context3.t0);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  var connectWallet = React.useCallback(function () {\n    return connector.connect();\n  }, [connector]);\n\n  var fetchConnectedData = function _callee4(data) {\n    var res;\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            console.log(smObj);\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(smObj.methods.walletOfOwner(data).call({\n              from: data\n            }));\n\n          case 3:\n            res = _context4.sent;\n            setUserNFT(res);\n            console.log('success');\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  React.useEffect(function () {\n    var SmartContractObj = new web3.eth.Contract(SmartContract.abi, '0x987934934388446e9a1B8261d6859D31cdD0Eaa5');\n    setSmObj(SmartContractObj);\n  }, []);\n  var ethersConfig = {\n    provider: getDefaultProvider('homestead')\n  };\n  return _jsxs(ImageBackground, {\n    source: require(\"../assets/background_dot.png\"),\n    resizeMode: \"repeat\",\n    style: styles.background,\n    children: [_jsxs(Appbar.Header, {\n      children: [_jsx(Appbar.Content, {\n        title: \"Your BioFi NFT \\uD83D\\uDDBC\"\n      }), _jsx(Appbar.Action, {\n        icon: \"dots-vertical\"\n      })]\n    }), _jsxs(Grid, {\n      children: [_jsxs(Row, {\n        size: 3,\n        style: {\n          alignItems: 'center'\n        },\n        children: [!connector.connected && _jsx(Grid, {\n          style: {\n            justifyContent: 'center'\n          },\n          children: _jsx(Button, {\n            style: {\n              width: '90%',\n              backgroundColor: 'lightgreen',\n              borderRadius: 20,\n              padding: 10,\n              margin: 10\n            },\n            onPress: connectWallet,\n            children: \"Connect your web3 wallet first\"\n          })\n        }), !NFTMetada && !!connector.connected && _jsx(Grid, {\n          style: {\n            justifyContent: 'center'\n          },\n          children: _jsx(Button, {\n            style: {\n              width: '90%',\n              backgroundColor: 'lightgreen',\n              borderRadius: 20,\n              padding: 10,\n              margin: 10\n            },\n            onPress: mintNFTs,\n            children: \"Mint your first and unique NFT !\"\n          })\n        }), !!NFTMetada && !!connector.connected && image && _jsx(Grid, {\n          children: _jsx(Image, {\n            source: {\n              uri: image.replace('ipfs://', 'https://ipfs.io/ipfs/')\n            },\n            style: {\n              flex: 1,\n              width: 400,\n              height: 400,\n              resizeMode: 'contain',\n              borderColor: \"lightgreen\",\n              borderWidth: 20\n            }\n          })\n        })]\n      }), _jsx(Row, {\n        size: 1\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    width: '100%'\n  }\n});","map":{"version":3,"names":["React","useEffect","Appbar","Button","Web3","useWalletConnect","SmartContract","Grid","Row","getDefaultProvider","web3","providers","HttpProvider","NFTScreen","navigation","useState","smObj","setSmObj","connector","accounts","contract","SmartContractObj","eth","Contract","abi","userNFT","setUserNFT","NFTMetada","setNFTMetadata","image","setImage","connected","isConnected","setIsConnected","console","log","getMetadata","fetchConnectedData","fetchImage","data","text","replace","fetch","then","response","json","responseJson","mintNFTs","getGasPrice","gasPrice","gasPriceHex","utils","toHex","getTransactionCount","nonce","nonceHex","tx","from","to","methods","mint","encodeABI","value","toWei","toString","sendTransaction","walletOfOwner","call","res","tokenURI","slice","connectWallet","useCallback","connect","ethersConfig","provider","require","styles","background","alignItems","justifyContent","width","backgroundColor","borderRadius","padding","margin","uri","flex","height","resizeMode","borderColor","borderWidth","StyleSheet","create"],"sources":["/Users/hemesky/BioFi-1/src/screens/NFTScreen.tsx"],"sourcesContent":["import React, { memo, useEffect } from 'react';\nimport { Appbar, Button } from 'react-native-paper';\nimport NftCard from '../components/NftCard';\nimport { Image, ImageBackground, StyleSheet } from 'react-native';\nimport { Navigation } from '../types';\nimport Web3 from 'web3';\nimport {\n  useWalletConnect,\n  withWalletConnect,\n} from '@walletconnect/react-native-dapp';\nimport SmartContract from '../../deployedContracts/BioFiCollection.json';\nimport { AbiItem } from 'web3-utils';\nimport { Grid, Row } from 'react-native-easy-grid';\nimport Paragraph from '../components/Paragraph';\nimport Header from '../components/Header';\nimport { Button as PaperButton } from 'react-native-paper';\nimport { getDefaultProvider } from 'ethers';\n\ntype Props = {\n  navigation: Navigation;\n};\n\nconst web3 = new Web3(\n  new Web3.providers.HttpProvider(\n    'https://eth-rinkeby.alchemyapi.io/v2/CKjA2vCRdONEgzsnq363uvG6ogeaOWjH'\n  )\n);\n\nexport default function NFTScreen({ navigation }: Props) {\n  const [smObj, setSmObj] = React.useState(null);\n\n  const connector = useWalletConnect();\n  const accounts = connector.accounts;\n  const contract = '0x987934934388446e9a1B8261d6859D31cdD0Eaa5';\n\n  React.useEffect(() => {\n    //smart contract instance\n    const SmartContractObj = new web3.eth.Contract(\n      SmartContract.abi as AbiItem[],\n      // NetworkData.address\n      '0x987934934388446e9a1B8261d6859D31cdD0Eaa5'\n    );\n    setSmObj(SmartContractObj);\n  }, []);\n\n  const [userNFT, setUserNFT] = React.useState(null);\n  const [NFTMetada, setNFTMetadata] = React.useState(null);\n  const [image, setImage] = React.useState(null);\n  const [isConnected, setIsConnected] = React.useState(connector.connected);\n\n  useEffect(() => {\n    console.log('OK' + userNFT);\n   !!userNFT && getMetadata();\n  }, [userNFT]);\n\n  useEffect(() => {\n    isConnected && smObj && fetchConnectedData(accounts[0]);\n  }, [isConnected, smObj]);\n\n  useEffect(() => {\n    !!NFTMetada && smObj && fetchImage(NFTMetada);\n  }, [NFTMetada, smObj]);\n\n  const fetchImage = async (data) => {\n    var text = data && data.replace('ipfs://', 'https://ipfs.io/ipfs/');\n    await fetch(text)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        console.log(responseJson);\n        setImage(responseJson.image);\n      });\n  };\n  const mintNFTs = async () => {\n    try {\n      const gasPrice = await web3.eth.getGasPrice();\n      const gasPriceHex = web3.utils.toHex(gasPrice);\n      const nonce = await web3.eth.getTransactionCount(accounts[0]);\n      const nonceHex = web3.utils.toHex(nonce);\n      const tx = {\n        from: accounts[0],\n        to: '0x987934934388446e9a1B8261d6859D31cdD0Eaa5',\n        data: smObj.methods.mint(accounts[0], 1).encodeABI(),\n        value: web3.utils.toWei((0.001 * 1).toString(), 'ether'),\n        gasPrice: gasPriceHex,\n        nonce: nonceHex,\n      };\n      console.log('tx', tx);\n      const response = await connector.sendTransaction(tx);\n      console.log('response: ', response);\n      if (response) {\n        const res = await smObj.methods\n          .walletOfOwner(accounts[0])\n          .call({ from: accounts[0] });\n        setUserNFT(res);\n        console.log('success');\n      }\n    } catch (e) {\n      console.log('error: ', e);\n    }\n  };\n\n  const getMetadata = async () => {\n    try {\n      const res = await smObj.methods\n        .tokenURI(userNFT.slice(-1)[0])\n        .call({ from: accounts[0] });\n      setNFTMetadata(res);\n    } catch (e) {\n      console.log('error: ', e);\n    }\n  };\n\n  const connectWallet = React.useCallback(() => {\n    return connector.connect();\n  }, [connector]);\n\n  const fetchConnectedData = async (data) => {\n    console.log(smObj)\n    const res = await smObj.methods\n      .walletOfOwner(data)\n      .call({ from: data });\n    setUserNFT(res);\n    console.log('success');\n  };\n  React.useEffect(() => {\n    //smart contract instance\n    const SmartContractObj = new web3.eth.Contract(\n      SmartContract.abi as AbiItem[],\n      // NetworkData.address\n      '0x987934934388446e9a1B8261d6859D31cdD0Eaa5'\n    );\n    setSmObj(SmartContractObj);\n  }, []);\n\n  const ethersConfig = {\n    provider: getDefaultProvider('homestead'),\n  };\n  return (\n    <ImageBackground\n      source={require('../assets/background_dot.png')}\n      resizeMode=\"repeat\"\n      style={styles.background}\n    >\n      <Appbar.Header>\n        <Appbar.Content title=\"Your BioFi NFT 🖼\" />\n        <Appbar.Action icon=\"dots-vertical\" />\n      </Appbar.Header>\n      <Grid>\n        <Row size={3} style={{ alignItems: 'center' }}>\n          {!connector.connected && (\n            <Grid style={{ justifyContent: 'center' }}>\n              <Button\n                style={{\n                  width: '90%',\n                  backgroundColor: 'lightgreen',\n                  borderRadius: 20,\n                  padding: 10,\n                  margin: 10,\n                }}\n                onPress={connectWallet}\n              >\n                Connect your web3 wallet first\n              </Button>\n            </Grid>\n          )}\n          {!NFTMetada && !!connector.connected && (\n            <Grid style={{ justifyContent: 'center' }}>\n              <Button\n                style={{\n                  width: '90%',\n                  backgroundColor: 'lightgreen',\n                  borderRadius: 20,\n                  padding: 10,\n                  margin: 10,\n                }}\n                onPress={mintNFTs}\n              >\n                Mint your first and unique NFT !\n              </Button>\n            </Grid>\n          )}\n          {!!NFTMetada && !!connector.connected && image && (\n            <Grid>\n            <Image source={{uri: image.replace('ipfs://', 'https://ipfs.io/ipfs/')}} style={{flex:1, width:400, height:400, resizeMode:'contain',borderColor:\"lightgreen\", borderWidth:20}}  />\n            </Grid>\n          )}\n        </Row>\n        <Row size={1}></Row>\n      </Grid>\n    </ImageBackground>\n  );\n}\n\nconst styles = StyleSheet.create({\n  background: {\n    flex: 1,\n    width: '100%',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}